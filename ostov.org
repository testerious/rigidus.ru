-*- mode: org; fill-column: 95 -*-
@title Построение остовного дерева в графе сайта на PHP
@category php
@sort php002

На <a href="/articles/php-site-graph">предыдущем этапе</a> мы получили визуализированное
представление графа переходов внутри сайта http://gehirn.ru. Однако при увеличении размеров
сайта количество узлов и связей возрастает и граф становится ненаглядным. Граф хорошего (с
точки зрения поисковых систем) сайта вообще приближается к полносвязному.

* Метод

Хочется большей наглядности. Чтобы ее достичь мы можем сократить
количество связей, выбрав среди них те, которые встречаются чаще - по
ним вероятность прохода поискового бота выше. На предыдущей итерации
мы получили сведения о том, сколько раз встречается данная связь между
двумя страницами, но эти сведения справедливы для ориентированного
графа. Остовное дерево же строится в неориентированном графе, поэтому
мы должны преобразовать граф в неориентированный, сложив для каждой
пары узлов их показатели весов.

@code
    <?php

    define('DB_PREFIX', 'Префикс таблиц');
    define('DB_TBL_TEST', 'Таблица страниц сайта');
    define('DB_TBL_LINK', 'Таблица связей между страницами');

    $sql = "SELECT `from`, `to`, `count` FROM `".
          DB_PREFIX.DB_TBL_LINK."` WHERE `site`='mycoolsite.ru'";
    $r = mysql_query($sql);
    if (false === $r) {    $my_die(); }
    while ($row = mysql_fetch_assoc($r)) {
        if ( (isset($nodes[$row['from']])) && (isset($nodes[$row['to']])) ) {
            $rel[] = $row;
        }
    }

    $neor = array();

    function hash_to($v)
    {
        global $neor;
        $hash = md5($v['from']).md5($v['to']);
        if (!isset($neor[$hash])) {
            $neor[$hash] = $v;
        } else {
            $neor[$hash]['count'] += $v['count'];
        }
    }

    foreach ($rel as $k=>$v) {
        if ($v['from'] < $v['to']) {
            hash_to($v);
        } else {
            $w = array();
            $w['from'] = $v['to'];
            $w['to'] = $v['from'];
            $w['count'] = $v['count'];
            hash_to($w);
        }
    }

    ?>
@/code

* Построение

Теперь приступим собственно к построению остовного дерева. Наша задача - по возможности
оставить те ребра, которые имеют наибольший вес. Алгоритм следующий:

@code
• Выделяем одну вершину, которая будет началом нашего дерева (корень)
• Далее на каждой итерации:
  ‣ Случайным образом выбираем вершину из строящегося дерева.
  ‣ Ищем ребра графа ведущие к любой вершине пока не входящей в дерево.
  ‣ Среди этих ребер выбираем ребро с максимальным весом.
  ‣ Добавляем это ребро и его вершину в дерево.
• Итерации повторяем до тех пор, пока все вершины не будут входить в дерево.
@/code

@code
<?php

// Строим список узлов на основе связей
$unmarked_nodes = array();
foreach ($neor as $k=>$v) {
    if (!isset($unmarked_nodes[$v['from']])) {
        $unmarked_nodes[$v['from']] = '';
    }
    if (!isset($unmarked_nodes[$v['to']])) {
        $unmarked_nodes[$v['to']] = '';
    }
}
$count_nodes = count($unmarked_nodes);
// Промаркированные узлы
$marked_nodes = array(1=>'');

// Пока все вершины не стали помеченными
    while (count($marked_nodes) != $count_nodes) {
     // Положить в U любую из помеченных вершин
        $U = array_rand($marked_nodes);
     // Находим все ребра...
    $u_links_key = '';
    $u_links_count = 0;
    $u_links_to = 0;
        foreach ($neor as $k=>$v) {
            // ...которые из нее или в нее идут...
            if ( ($v['from'] == $U) || ($v['to'] == $U) ) {
                // ...к непомеченным вершинам..
                $to = ($v['from'] == $U)?$v['to']:$v['from'];
                if (!isset($marked_nodes[$to])) {
                    // ... и выбираем самое тяжелое ребро
                    if ($v['count'] > $u_links_count) {
                        $u_links_key = $k;
                        $u_links_count = $v['count'];
                        $u_links_to = $to;
                    }
                }
            }
        }
     // Если переменные поиска не изменились - значит для этой
    // вершины нет (больше) ребер, связывающих ее с непомеченными
    // вершинами. Можно переходить на следующую итерацию
        if ( ($u_links_key == '') && ($u_links_count == 0) ) {
            continue;
        }
     // Помечаем ребро, чтобы потом построить конденсацию из помеченных ребер
        $neor[$u_links_key]['tag'] = '';
    // Помечаем вершину, чтобы исключить ее из поиска
        $marked_nodes[$u_links_to] = '';
         }

?>
@/code

Теперь перед нами стоит задача визуализации остовного дерева. В этом
нам поможет Стендфорд :) Точнее, разработка Тамары Мюнзнер (Tamara
Munzner), визуализирущая наше дерево в гиперболическом
пространстве. Визуализацию можно даже вращать. Само приложение и
сопроводительная документаци лежит здесь: <a
href="http://graphics.stanford.edu/~munzner/h3/">
http://graphics.stanford.edu/~munzner/h3/ </a> Ниже - код, который
создает представление графа, понятное H3Viewer`у

@code
<?php

$sql = "SELECT `id`, `link` FROM `".DB_PREFIX.DB_TBL_TEST.
      "` WHERE ((`ext`=0) AND (`site`='gehirn.ru'))";
$r = mysql_query($sql);
if (false === $r) {    $my_die(); }
while ($row = mysql_fetch_assoc($r)) {
    $nodes[$row['id']] = $row['link'];
}

$childs = array();
create_childs();

function create_childs($p=1)
{
    global $childs, $rel;
     if (!isset($childs[$p])) {
        $childs[$p] = array();
    }
     foreach ($rel as $k=>$v) {
        if ( ($v['from'] == $p) || ($v['to'] == $p) ) {
            $pair = ($v['from'] == $p)?$v['to']:$v['from'];
            if (!isset($childs[$pair])) {
                $childs[$p][] = ($v['from'] == $p)?$v['to']:$v['from'];
            }
        }
    }
     foreach ($childs[$p] as $v) {
        create_childs($v);
    }
}

$massive = array(0=>array());
$level=array(0);
$f = true;

h3v(1);


function h3v($in, $key='')
{
    global $childs, $massive, $level;
     if (!is_array($in)) {
         // write
        $s = '$massive';
        foreach ($level as $w) { $s .='["'.$w.'"]'; }
        eval($s.'["'.$in.'"] = array();');
        //get array from childs
        $a_from_child = $childs[$in];
        h3v($a_from_child, $in);
     } else {
         array_push($level, $key);
        foreach ($in as $k=>$v) {
            h3v($v);
        }
        array_pop($level);
     }
}

$level = 0;
recout(current($massive));

function recout($v)
{
    global $level, $nodes;
    if (!empty($v)) {
        foreach ($v as $k=>$w) {
            echo($level.' '.$nodes[$k].' 1 html<br>');
            $level++;
            recout($w);
            $level--;
        }
    }
}

?>
@/code

Примерно так выглядят исходные данные:
@code
0 / 1 html
1 /info/contacts 1 html
2 /info 1 html
1 /postid/3 1 html
2 /rss 1 html
3 /services/advert-photo 1 html
4 /portfolio/photo-wedding 1 html
4 /articles/inside-flash 1 html
5 /articles/focalsize 1 html
6 /articles/easy-portrait 1 html
3 /articles/model-work 1 html
4 /articles/hi-key 1 html
2 /info/about 1 html
3 /services 1 html
3 /services/wedding-photo 1 html
4 /services/art-portfolio 1 html
5 /articles/wedding-light 1 html
6 /articles/photo-theatre 1 html
3 /articles 1 html
3 /sitemap 1 html
4 /portfolio/photo-studio 1 html
4 /articles/portrait-light 1 html
1 /postid/2 1 html
2 /newuser 1 html
3 /services/portrait-photo 1 html
4 /services/reportage-photo 1 html
5 /articles/wedding-dress 1 html
6 /articles/wedding-makeup 1 html
6 /articles/find-photographer 1 html
4 /services/classic-portfolio 1 html
3 /portfolio 1 html
3 /articles/color-correction 1 html
2 /articles/flash-photo 1 html
3 /articles/speed-aperture 1 html
2 /articles/photoeye 1 html
3 /articles/studio-light 1 html
2 /articles/4rules 1 html
3 /postid/1 1 html
@/code

А вот так выглядит собственно представление. Скачав программу и
загрузив в нее эти данные можно представление покрутить.

<center><img src="/h3v.gif"/></center>
